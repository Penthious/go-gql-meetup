type Meetup @goModel(model: "github.com/penthious/go-gql-meetup/models.Meetup") {
    id: ID!
    name: String!
    description: String!
#    createdAt: Time!
#    updatedAt: Time!
#    deleatedAt: Time!

    user: User! @goField(forceResolver: true)
}

input NewMeetupPayload @goModel(model: "github.com/penthious/go-gql-meetup/models.NewMeetupPayload") {
    name: String! @length(min: 3)
    description: String! @length(min: 3)
}

input UpdateMeetupPayload @goModel(model: "github.com/penthious/go-gql-meetup/models.UpdateMeetupPayload") {
    name: String @length(min: 3)
    description: String @length(min: 3)
}

input MeetupFilterPayload @goModel(model: "github.com/penthious/go-gql-meetup/models.MeetupFilterPayload") {
    name: String
    description: String
}

extend type Query {
    meetups(filter: MeetupFilterPayload): [Meetup!]!
}

extend type Mutation {
    createMeetup(input: NewMeetupPayload!): Meetup!
    updateMeetup(id: ID!, input: UpdateMeetupPayload!): Meetup!
    deleteMeetup(id: ID!): Boolean!
}
